<?php
/**
 * ShipmentApi
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Royal Mail API Shipping V2 (REST)
 *
 * This API specification details the requirements for integrating with Royal Mail API Shipping V2 (REST). It specifically covers how the Royal Mail API Shipping V2 (REST) can be used by business customers to conduct shipping activity with Royal Mail and provides the technical information to build this integration. This specification must be used with the relevant accompanying specifications for customers wishing to interface their systems with Royal Mail services.  Royal Mail API Shipping V2 (REST) exposes a fully RESTful service that allows account customers to create shipments, produce labels, and produce documentation for all the tasks required to ship domestic items with Royal Mail. Built on industry standards, Royal Mail API Shipping V2 (REST) provides a simple and low cost method for customers to integrate with Royal Mail, and allows them to get shipping quickly. The API offers data streaming and offline barcoding to allow customers greater flexibility when generating their labels.  There are no costs to customers for using the Royal Mail API Shipping V2 (REST) services, however customersâ€™ own development costs must be covered by the customer developing the solution. Royal Mail will not accept any responsibility for these development, implementation and testing costs. Customers should address initial enquiries regarding development of systems for these purposes to their account handler.  This API can be used in conjunction with Royal Mail Pro Shipping, a GUI based shipping platform. For more details on Royal Mail Pro Shipping, including videos on and briefs on updating cancelling a shipment and manifesting click here&#58; www.royalmail.com/pro-shipping-help
 *
 * OpenAPI spec version: 1.0.21
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\Shipping\Rest\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use RoyalMail\Shipping\Rest\Api\ApiException;
use RoyalMail\Shipping\Rest\Api\Configuration;
use RoyalMail\Shipping\Rest\Api\HeaderSelector;
use RoyalMail\Shipping\Rest\Api\ObjectSerializer;

/**
 * ShipmentApi Class Doc Comment
 *
 * @category Class
 * @package  RoyalMail\Shipping\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation domesticPost
     *
     * Create a domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse
     */
    public function domesticPost($body, $xRMGAuthToken)
    {
        list($response) = $this->domesticPostWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation domesticPostWithHttpInfo
     *
     * Create a domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function domesticPostWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse';
        $request = $this->domesticPostRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation domesticPostAsync
     *
     * Create a domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domesticPostAsync($body, $xRMGAuthToken)
    {
        return $this->domesticPostAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation domesticPostAsyncWithHttpInfo
     *
     * Create a domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function domesticPostAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse';
        $request = $this->domesticPostRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'domesticPost'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function domesticPostRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling domesticPost'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling domesticPost'
            );
        }

        $resourcePath = '/domestic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Secret');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentNumberDelete
     *
     * Cancel a shipment.
     *
     * @param  string $shipmentNumber shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse
     */
    public function shipmentNumberDelete($shipmentNumber, $xRMGAuthToken)
    {
        list($response) = $this->shipmentNumberDeleteWithHttpInfo($shipmentNumber, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentNumberDeleteWithHttpInfo
     *
     * Cancel a shipment.
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentNumberDeleteWithHttpInfo($shipmentNumber, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse';
        $request = $this->shipmentNumberDeleteRequest($shipmentNumber, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentNumberDeleteAsync
     *
     * Cancel a shipment.
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentNumberDeleteAsync($shipmentNumber, $xRMGAuthToken)
    {
        return $this->shipmentNumberDeleteAsyncWithHttpInfo($shipmentNumber, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentNumberDeleteAsyncWithHttpInfo
     *
     * Cancel a shipment.
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentNumberDeleteAsyncWithHttpInfo($shipmentNumber, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse';
        $request = $this->shipmentNumberDeleteRequest($shipmentNumber, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentNumberDelete'
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentNumberDeleteRequest($shipmentNumber, $xRMGAuthToken)
    {
        // verify the required parameter 'shipmentNumber' is set
        if ($shipmentNumber === null || (is_array($shipmentNumber) && count($shipmentNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentNumber when calling shipmentNumberDelete'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentNumberDelete'
            );
        }

        $resourcePath = '/{shipmentNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }

        // path params
        if ($shipmentNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentNumber' . '}',
                ObjectSerializer::toPathValue($shipmentNumber),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Secret');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentNumberLabelPut
     *
     * Create shipment label.
     *
     * @param  string $shipmentNumber shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $outputFormat Label Format Type. The content of the response.  &gt; Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\LabelResponse
     */
    public function shipmentNumberLabelPut($shipmentNumber, $xRMGAuthToken, $outputFormat)
    {
        list($response) = $this->shipmentNumberLabelPutWithHttpInfo($shipmentNumber, $xRMGAuthToken, $outputFormat);
        return $response;
    }

    /**
     * Operation shipmentNumberLabelPutWithHttpInfo
     *
     * Create shipment label.
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $outputFormat Label Format Type. The content of the response.  &gt; Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\LabelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentNumberLabelPutWithHttpInfo($shipmentNumber, $xRMGAuthToken, $outputFormat)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\LabelResponse';
        $request = $this->shipmentNumberLabelPutRequest($shipmentNumber, $xRMGAuthToken, $outputFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\LabelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentNumberLabelPutAsync
     *
     * Create shipment label.
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $outputFormat Label Format Type. The content of the response.  &gt; Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentNumberLabelPutAsync($shipmentNumber, $xRMGAuthToken, $outputFormat)
    {
        return $this->shipmentNumberLabelPutAsyncWithHttpInfo($shipmentNumber, $xRMGAuthToken, $outputFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentNumberLabelPutAsyncWithHttpInfo
     *
     * Create shipment label.
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $outputFormat Label Format Type. The content of the response.  &gt; Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentNumberLabelPutAsyncWithHttpInfo($shipmentNumber, $xRMGAuthToken, $outputFormat)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\LabelResponse';
        $request = $this->shipmentNumberLabelPutRequest($shipmentNumber, $xRMGAuthToken, $outputFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentNumberLabelPut'
     *
     * @param  string $shipmentNumber (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $outputFormat Label Format Type. The content of the response.  &gt; Unspecified / PDF: returns the standard Base64 Encoded PDF Label   DS: returns a data stream  DSPDF: returns both the data stream and the Base64 Encoded PDF Label.  PNG: returns Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode.  DSPNG: returns both the data stream and the Base64 Encoded PNG images of the 2D Data Matric and 1D Linear Barcode. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentNumberLabelPutRequest($shipmentNumber, $xRMGAuthToken, $outputFormat)
    {
        // verify the required parameter 'shipmentNumber' is set
        if ($shipmentNumber === null || (is_array($shipmentNumber) && count($shipmentNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentNumber when calling shipmentNumberLabelPut'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentNumberLabelPut'
            );
        }
        // verify the required parameter 'outputFormat' is set
        if ($outputFormat === null || (is_array($outputFormat) && count($outputFormat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputFormat when calling shipmentNumberLabelPut'
            );
        }

        $resourcePath = '/{shipmentNumber}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($outputFormat !== null) {
            $queryParams['outputFormat'] = ObjectSerializer::toQueryValue($outputFormat);
        }
        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }

        // path params
        if ($shipmentNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentNumber' . '}',
                ObjectSerializer::toPathValue($shipmentNumber),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Secret');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentNumberPut
     *
     * Update a shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber shipmentNumber (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse
     */
    public function shipmentNumberPut($body, $xRMGAuthToken, $shipmentNumber)
    {
        list($response) = $this->shipmentNumberPutWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber);
        return $response;
    }

    /**
     * Operation shipmentNumberPutWithHttpInfo
     *
     * Update a shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentNumberPutWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse';
        $request = $this->shipmentNumberPutRequest($body, $xRMGAuthToken, $shipmentNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentNumberPutAsync
     *
     * Update a shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentNumberPutAsync($body, $xRMGAuthToken, $shipmentNumber)
    {
        return $this->shipmentNumberPutAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentNumberPutAsyncWithHttpInfo
     *
     * Update a shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentNumberPutAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CancelOrUpdateShipmentResponse';
        $request = $this->shipmentNumberPutRequest($body, $xRMGAuthToken, $shipmentNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentNumberPut'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\Shipment $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentNumberPutRequest($body, $xRMGAuthToken, $shipmentNumber)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentNumberPut'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentNumberPut'
            );
        }
        // verify the required parameter 'shipmentNumber' is set
        if ($shipmentNumber === null || (is_array($shipmentNumber) && count($shipmentNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentNumber when calling shipmentNumberPut'
            );
        }

        $resourcePath = '/{shipmentNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }

        // path params
        if ($shipmentNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentNumber' . '}',
                ObjectSerializer::toPathValue($shipmentNumber),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Secret');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsPost
     *
     * Create an international or domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsRequest $body body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse
     */
    public function shipmentsPost($body, $xRMGAuthToken)
    {
        list($response) = $this->shipmentsPostWithHttpInfo($body, $xRMGAuthToken);
        return $response;
    }

    /**
     * Operation shipmentsPostWithHttpInfo
     *
     * Create an international or domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsPostWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse';
        $request = $this->shipmentsPostRequest($body, $xRMGAuthToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsPostAsync
     *
     * Create an international or domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPostAsync($body, $xRMGAuthToken)
    {
        return $this->shipmentsPostAsyncWithHttpInfo($body, $xRMGAuthToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsPostAsyncWithHttpInfo
     *
     * Create an international or domestic shipment.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsPostAsyncWithHttpInfo($body, $xRMGAuthToken)
    {
        $returnType = '\RoyalMail\Shipping\Rest\Api\models\CreatedShipmentResponse';
        $request = $this->shipmentsPostRequest($body, $xRMGAuthToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsPost'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\ShipmentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsPostRequest($body, $xRMGAuthToken)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsPost'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsPost'
            );
        }

        $resourcePath = '/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Secret');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipmentsShipmentNumberDocumentsPut
     *
     * Create international documents.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\DocumentsRequest $body body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber shipmentNumber (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function shipmentsShipmentNumberDocumentsPut($body, $xRMGAuthToken, $shipmentNumber)
    {
        list($response) = $this->shipmentsShipmentNumberDocumentsPutWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber);
        return $response;
    }

    /**
     * Operation shipmentsShipmentNumberDocumentsPutWithHttpInfo
     *
     * Create international documents.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\DocumentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \RoyalMail\Shipping\Rest\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipmentsShipmentNumberDocumentsPutWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber)
    {
        $returnType = 'object';
        $request = $this->shipmentsShipmentNumberDocumentsPutRequest($body, $xRMGAuthToken, $shipmentNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\RoyalMail\Shipping\Rest\Api\models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipmentsShipmentNumberDocumentsPutAsync
     *
     * Create international documents.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\DocumentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentNumberDocumentsPutAsync($body, $xRMGAuthToken, $shipmentNumber)
    {
        return $this->shipmentsShipmentNumberDocumentsPutAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipmentsShipmentNumberDocumentsPutAsyncWithHttpInfo
     *
     * Create international documents.
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\DocumentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipmentsShipmentNumberDocumentsPutAsyncWithHttpInfo($body, $xRMGAuthToken, $shipmentNumber)
    {
        $returnType = 'object';
        $request = $this->shipmentsShipmentNumberDocumentsPutRequest($body, $xRMGAuthToken, $shipmentNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipmentsShipmentNumberDocumentsPut'
     *
     * @param  \RoyalMail\Shipping\Rest\Api\models\DocumentsRequest $body (required)
     * @param  string $xRMGAuthToken Authorisation token required to invoke this operation. Can be retrieved by invoking the **_/token** operation. (required)
     * @param  string $shipmentNumber (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipmentsShipmentNumberDocumentsPutRequest($body, $xRMGAuthToken, $shipmentNumber)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shipmentsShipmentNumberDocumentsPut'
            );
        }
        // verify the required parameter 'xRMGAuthToken' is set
        if ($xRMGAuthToken === null || (is_array($xRMGAuthToken) && count($xRMGAuthToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xRMGAuthToken when calling shipmentsShipmentNumberDocumentsPut'
            );
        }
        // verify the required parameter 'shipmentNumber' is set
        if ($shipmentNumber === null || (is_array($shipmentNumber) && count($shipmentNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentNumber when calling shipmentsShipmentNumberDocumentsPut'
            );
        }

        $resourcePath = '/shipments/{shipmentNumber}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xRMGAuthToken !== null) {
            $headerParams['X-RMG-Auth-Token'] = ObjectSerializer::toHeaderValue($xRMGAuthToken);
        }

        // path params
        if ($shipmentNumber !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentNumber' . '}',
                ObjectSerializer::toPathValue($shipmentNumber),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Id');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-IBM-Client-Secret');
        if ($apiKey !== null) {
            $headers['X-IBM-Client-Secret'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
